; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Confiacim"
#define MyAppVersion "0.1.0"
#define MyAppExeName "Confiacim_gui.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D5B5F039-857E-4BDE-A39C-BFD645EBAAF9}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
DefaultDirName={sd}\{#MyAppName}
DisableProgramGroupPage=yes
UsePreviousAppDir=no
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=lowest
OutputBaseFilename=confiacim-setup
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "D:\confiacim_pacote\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\confiacim_pacote\confiacim_bundle.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\confiacim_pacote\lib\*"; DestDir: "{app}/lib"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Registry]
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName: "CONFIACIM_EXEC_TENCIM_BIN"; ValueData: "TENCIM1D_08.exe"; Flags: preservestringtype;
;Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName: "CONFIACIM_EXEC_TENCIM_DIR"; ValueData: {app}; Flags: preservestringtype;
Root: HKCU; Subkey: "Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; Check: NeedsAddPath(ExpandConstant('{app}'));

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
function NeedsAddPath(Param: string): boolean;
var
  OrigPath: string;
  Find: boolean;
begin
  Find := RegQueryStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', OrigPath);
  if not Find
  then begin
    Result := True;
    exit;
  end;
  { look for the path with leading and trailing semicolon }
  { Pos() returns 0 if not found }
  Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
end;